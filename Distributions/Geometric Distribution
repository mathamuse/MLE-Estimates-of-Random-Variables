################## HEADERS AND INCLUSIONS ##########################
import numpy as np
import matplotlib.pyplot as plt

################# Define a Geometric Distribution ########################
###################### p is parameter for probability of getting 1 #######
def coin(p):
    #generate uniformly 1 with probability p
    rv= np.random.uniform()
    
    if rv <=p: out =1
    else : out = 0
    
    return out

##################### Flip coin until it shows heads ####################
def geom_dist(p):
    ct=0
    flip=0
    
    while(flip == 0):
       flip=coin(p)
       #print(flip)
       ct+=1
    
    #print("Overall count is:",ct)
    return ct        #return the number of times flipped

###########################################################################
##                                  INPUT                                ##   
###########################################################################
p=0.3                           # Probability parameter initialised

no_of_samples = 1000            # number of samples

sampler =[]                     # storage of samples
 
for i in range(no_of_samples):
    sampler.append(geom_dist(p))

###########################################################
print("\n The generated sample with  p =", p ," is : \n")
print(sampler)                  # mainly for testing

######################### Estimate ############################
ss = sum(sampler)

estimator = no_of_samples / ss

perc_error = ((estimator-p)/p)*100

###########################################################################
##                                  OUTPUT                               ##
###########################################################################
print("\n We estimate the parameter p to be: ",estimator)    # show output of the samples collected
print("\n % Error in estimate is: ",perc_error)              # show output of the samples collected

plt.hist(sampler, bins=60)                                   # graph it as a histogram
